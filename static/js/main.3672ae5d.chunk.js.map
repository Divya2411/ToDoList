{"version":3,"sources":["ToDoList.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ToDOList","props","text","App","useState","inputList","setInputList","Items","setItems","className","type","placeholder","value","onChange","event","target","onClick","oldItem","map","itemval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAMeA,EAJE,SAACC,GACd,OAAM,6BAAMA,EAAMC,QC2CPC,EA3CH,WAAO,IAAD,EACoBC,mBAAS,IAD7B,mBACPC,EADO,KACIC,EADJ,OAEWF,mBAAS,IAFpB,mBAEPG,EAFO,KAEAC,EAFA,KAed,OACI,mCACA,qBAAKC,UAAY,WAAjB,SACI,sBAAKA,UAAY,aAAjB,UACI,uBACA,2CACA,uBACA,uBAAOC,KAAM,OAAOC,YAAa,cACjCC,MAASP,EACTQ,SAnBM,SAACC,GACfR,EAAaQ,EAAMC,OAAOH,UAmBnB,wBAAQI,QAhBC,WACXR,GAAS,SAACS,GACN,MAAM,GAAN,mBAAWA,GAAX,CAAoBZ,OAExBC,EAAa,KAYqBG,UAAY,SAA5C,iBAEA,6BAGKF,EAAMW,KAAI,SAACC,GACb,OAAO,cAAC,EAAD,CAAUjB,KAAQiB,iBCtB5BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3672ae5d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ToDOList = (props) =>{\r\n    return< li>{props.text}</li>\r\n}\r\n\r\nexport default ToDOList;","import React, { useState } from \"react\";\r\nimport ToDOList from './ToDoList';\r\n\r\nconst App = () => {\r\n    const [inputList, setInputList] = useState(\"\");\r\n    const [Items, setItems]= useState([]);\r\n\r\n\r\n    const itemEvent = (event) => {\r\n        setInputList(event.target.value);\r\n    };\r\n\r\n    const listOfItems = () => {\r\n             setItems((oldItem) => {\r\n                 return [...oldItem, inputList]\r\n             });\r\n             setInputList(\"\");\r\n    }\r\n    return (\r\n        <>\r\n        <div className = \"main_div\">\r\n            <div className = \"center_div\">\r\n                <br />\r\n                <h1>ToDo List</h1>\r\n                <br/>\r\n                <input type= \"text\" placeholder= \"add a Items\"\r\n                value = {inputList}\r\n                onChange= {itemEvent}/>\r\n               <button onClick = {listOfItems} className = \"newBtn\"> + </button>\r\n\r\n               <ol>\r\n                   {/* <li> {inputList} </li> */}\r\n\r\n                 {  Items.map((itemval) => {\r\n                  return <ToDOList text = {itemval}\r\n                  \r\n                  />\r\n\r\n                   })}\r\n               </ol>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}